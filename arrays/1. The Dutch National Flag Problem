// TC O(n^2) SC O(1)

vector<int> dnf(int idx, vector<int> A) {
  	int pivot = A[idx];
	
  	// Bring smaller values than pivot to the front
	for (int i = 0; i < A.size(); i++) {
		for (int j = i + 1; j < A.size(); j++) {
			if (A[j] < pivot) {
				swap(A[i], A[j]);
				break;
		 	}
		}
 	}

  	// Bring larger values than pivot to the back
  	for (int i = A.size() - 1; i >= 0 && A[i] >= pivot; i--) {
	    for (int j = i - 1; j >= 0; j--) {
	  		if (A[j] > pivot) {
				swap(A[i], A[j]);
				break;
	  		}
	    }
  	}

  	return A;
}


// TC O(n) SC O(1): Two Pass

vector<int> dnfB(int idx, vector<int> A) {

	int pivot = A[idx], curr = 0;
	
	//Bring smaller values than pivot to the front
	for(int i = 0; i < A.size(); i++) 
		if(A[i] < pivot)
			swap(A[curr++], A[i]);

	//Bring larger values than pivot to the back
	curr = A.size() - 1;
	for(int i = A.size() - 1; i >= 0 && A[i] >= pivot; i--)
		if(A[i] > pivot) 
			swap(A[curr--], A[i]);
	
	return A;
}


// TC O(n) SC O(1): One pass

vector<int> dnfC(int idx, vector<int> A) {

  	int low = 0, mid = 0, high = A.size() - 1, pivot = A[idx];

	while(mid <= high) {
		if(A[mid] == pivot) mid++;
		else if(A[mid] < pivot) swap(A[mid++], A[low++]);
		else swap(A[mid], A[high--]);
	}

  return A;
}
